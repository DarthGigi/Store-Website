---
let { id, description, x, y } = Astro.props;
let colors;
let height;
let peer;
let peerChecked;
let span1;
switch (id) {
  case "Stripe":
    colors = "from-purple-500 to-blue-600";
    height = "h-24";
    peer = "peer/Stripe";
    peerChecked = "peer-checked/Stripe:scale-[0.96]";
    span1 = "!flex-col !items-stretch";
    description = `${id}
    <span class="relative mt-1 block cursor-pointer text-left text-xs font-normal tracking-normal opacity-70">${description}</span>`;
    break;

  case "Crypto":
    colors = "from-yellow-500 to-orange-600";
    height = "h-20";
    peer = "peer/Crypto";
    peerChecked = "peer-checked/Crypto:scale-[0.96]";
    description = `${id}`;
    break;

  case "Robux":
    colors = "from-yellow-500 to-white";
    height = "h-20";
    peer = "peer/Robux";
    peerChecked = "peer-checked/Robux:scale-[0.96]";
    description = `${id}`;
    break;

  default:
    break;
}
---

<input required type="radio" disabled id={id} value={id} name="payment" class:list={[peer, "invisible absolute m-0 cursor-default list-outside list-none p-0 text-left text-sm text-white opacity-0"]} />
<label for={id} class:list={[height, peerChecked, "group relative flex w-full cursor-pointer items-center justify-between overflow-hidden rounded-lg bg-neutral-800 bg-opacity-70 p-4 shadow-sm backdrop-blur-md transition-all duration-500 hover:scale-105 focus:border-neutral-500 focus:outline-none focus:ring-2 focus:ring-neutral-500 active:scale-50 active:hover:scale-100 peer-disabled:pointer-events-none"]}>
  <div class:list={[colors, "absolute inset-0 max-h-[100px] max-w-[100px] transform rounded-full bg-gradient-to-r blur-lg transition-all duration-500 group-active:group-hover:duration-200 group-[:checked+&]:scale-[600%]"]} style={{ transform: `translate(${x}%, ${y}%) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))` }}></div>

  <span class:list={[span1, "flex-col md:flex-row justify-center md:items-baseline items-center  z-20 flex w-full cursor-pointer md:justify-between text-center leading-5 tracking-tight"]}>
    <span class="relative m-0 min-w-0 basis-1/2 cursor-pointer p-0 text-left leading-5 tracking-tight">
      <span set:html={description} class="cursor-pointer text-left text-lg font-semibold leading-5 tracking-tight text-white" />
    </span>
    <span class="relative m-0 min-w-0 basis-1/2 cursor-pointer p-0 text-right leading-5 tracking-tight">
      <span id={id + "Price"} class="inline-block cursor-pointer whitespace-nowrap text-right text-xs leading-4 tracking-normal text-white"></span>
    </span>
  </span>
</label>

<script>
  function showGuide() {
    const tier = (document.querySelector('input[name="tier"]:checked') as HTMLInputElement).value;
    let paymentMethod;
    if (document.querySelector('input[name="payment"]:checked') as HTMLInputElement) {
      paymentMethod = (document.querySelector('input[name="payment"]:checked') as HTMLInputElement).value;
    }
    const howtobuy = document.getElementById("howtobuy");
    const howtobuytitle = document.getElementById("howtobuytitle");
    const howtobuytxt = document.getElementById("howtobuytxt");
    let robloxtxt;

    if (document.querySelector('input[name="payment"]:checked') as HTMLInputElement) {
      if (howtobuy.classList.contains("opacity-0") && howtobuy.classList.contains("scale-0") && paymentMethod !== "Stripe" && paymentMethod !== "Crypto") {
        showGuideTxt();
        howtobuy.classList.remove("opacity-0", "scale-0");
      } else if (!howtobuy.classList.contains("opacity-0") && !howtobuy.classList.contains("scale-0") && paymentMethod !== "Stripe" && paymentMethod !== "Crypto") {
        howtobuy.classList.add("opacity-0", "scale-0");
        setTimeout(() => {
          showGuideTxt();
          howtobuy.classList.remove("opacity-0", "scale-0");
        }, 500);
      } else if (!howtobuy.classList.contains("opacity-0") && !howtobuy.classList.contains("scale-0") && (paymentMethod === "Stripe" || paymentMethod === "Crypto")) {
        howtobuy.classList.add("opacity-0", "scale-0");
      }
    }

    function showGuideTxt() {
      if (paymentMethod === "Robux") {
        if (tier == "Pro") {
          robloxtxt = "Buy the <a href='https://www.roblox.com/game-pass/19208841/Pro' target='_blank' class='underline'>Sirius Pro</a> gamepass, and then make a ticket with your Roblox profile link with public inventory enabled.";
        } else if (tier == "Essential") {
          robloxtxt = "Unfortunately, we do not support buying Essential with Robux. Please use a different payment method.";
        }
        howtobuytitle.innerHTML = "How to buy with Robux";
        howtobuytxt.innerHTML = robloxtxt;
      }
    }
  }

  document.querySelector("#payment").parentElement.addEventListener("change", (event) => {
    const target = event.target as HTMLElement;
    if (target.matches('input[name="payment"]') || target.matches('input[name="tier"]')) {
      showGuide();
    }
  });

  const paymentInputs = document.querySelectorAll('input[name="payment"]') as NodeListOf<HTMLInputElement>;
  const payment = document.getElementById("payment");
  const details = document.getElementById("details");
  const inputs = details.querySelectorAll("input") as NodeListOf<HTMLInputElement>;

  function showDetails() {
    details.classList.remove("hidden");
    setTimeout(() => {
      details.classList.remove("opacity-0", "scale-0");
    }, 100);
    inputs.forEach((input) => {
      input.disabled = false;
    });
  }

  function hideDetails(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.value !== "Stripe" && input.value !== "Crypto") {
      details.classList.add("opacity-0", "scale-0");
      // scroll to center of payment
      if (!details.classList.contains("hidden")) {
        payment.scrollIntoView({ behavior: "smooth", block: "center" });
        setTimeout(() => {
          details.classList.add("hidden");
        }, 500);
      }

      inputs.forEach((input) => {
        input.disabled = true;
      });
    }
  }

  function infoMenuPrice() {
    const infoMenuPaymentMethod = document.getElementById("infoMenuPaymentMethod");
    const infoMenuPrice = document.getElementById("infoMenuPrice");
    let payment = (document.querySelector('input[name="payment"]:checked') as HTMLInputElement).value;
    let price = document.getElementById((document.querySelector('input[name="payment"]:checked') as HTMLInputElement).value + "Price").innerHTML;

    // if the tier is Essential and the payment method is Robux, do not display anything
    if (payment === "Robux" && (document.querySelector('input[name="tier"]:checked') as HTMLInputElement).value === "Essential") {
      payment = "";
      price = "";
    }

    // remove classes from the parent element
    if (infoMenuPrice.parentElement.classList.contains("scale-0")) {
      infoMenuPaymentMethod.innerHTML = payment;
      infoMenuPrice.innerHTML = price;
      infoMenuPrice.parentElement.classList.remove("hidden");
      infoMenuPrice.parentElement.classList.add("flex");
      setTimeout(() => {
        infoMenuPrice.parentElement.classList.remove("opacity-0", "scale-0");
      }, 100);
    } else {
      // hide the element for a split second and then show it again
      // do not change the content of the element so that it doesn't look weird
      infoMenuPrice.parentElement.classList.add("opacity-0", "scale-0");
      setTimeout(() => {
        infoMenuPaymentMethod.innerHTML = payment;
        infoMenuPrice.innerHTML = price;
        infoMenuPrice.parentElement.classList.remove("opacity-0", "scale-0");
      }, 500);
    }
  }

  paymentInputs.forEach((input) => {
    if (input.value === "Stripe" || input.value === "Crypto") {
      input.addEventListener("change", showDetails);
    } else {
      input.addEventListener("change", hideDetails);
    }
    input.addEventListener("change", infoMenuPrice);
  });

  document.querySelectorAll('input[name="tier"]').forEach((input) => {
    input.addEventListener("change", infoMenuPrice);
  });
</script>
